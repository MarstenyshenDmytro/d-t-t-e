{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\Dima\\\\d-t-t-e\\\\components\\\\form\\\\Field\\\\Field.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { FieldContainer, Label, FieldContent, ErrorMessage } from \"./styledComponent\";\n\nvar Field = function Field(_ref) {\n  _s();\n\n  var name = _ref.name,\n      label = _ref.label,\n      placeholder = _ref.placeholder,\n      errors = _ref.errors,\n      register = _ref.register,\n      Component = _ref.component,\n      validator = _ref.validator;\n  var error = errors[name];\n\n  var _useState = useState(false),\n      isFocus = _useState[0],\n      setIsFocus = _useState[1];\n\n  var handleControl = function handleControl() {\n    setIsFocus(!isFocus);\n  };\n\n  return __jsx(FieldContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, label && __jsx(Label, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  }, label), __jsx(FieldContent, {\n    isError: error && !isFocus,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(Component, {\n    name: name,\n    placeholder: placeholder,\n    handleControl: handleControl,\n    register: register,\n    isFocus: isFocus,\n    validator: validator,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  })), __jsx(ErrorMessage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, error && !isFocus && error.message));\n};\n\n_s(Field, \"Ioko+NurZnYcx83iF0mDDG6apuM=\");\n\n_c = Field;\nexport default Field;\n\nvar _c;\n\n$RefreshReg$(_c, \"Field\");","map":{"version":3,"sources":["D:/Dima/d-t-t-e/components/form/Field/Field.tsx"],"names":["React","useState","FieldContainer","Label","FieldContent","ErrorMessage","Field","name","label","placeholder","errors","register","Component","component","validator","error","isFocus","setIsFocus","handleControl","message"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAGA,SACEC,cADF,EAEEC,KAFF,EAGEC,YAHF,EAIEC,YAJF,QAKO,mBALP;;AAOA,IAAMC,KAA+B,GAAG,SAAlCA,KAAkC,OAQlC;AAAA;;AAAA,MAPJC,IAOI,QAPJA,IAOI;AAAA,MANJC,KAMI,QANJA,KAMI;AAAA,MALJC,WAKI,QALJA,WAKI;AAAA,MAJJC,MAII,QAJJA,MAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFOC,SAEP,QAFJC,SAEI;AAAA,MADJC,SACI,QADJA,SACI;AACJ,MAAMC,KAAK,GAAGL,MAAM,CAACH,IAAD,CAApB;;AADI,kBAE0BN,QAAQ,CAAU,KAAV,CAFlC;AAAA,MAEGe,OAFH;AAAA,MAEYC,UAFZ;;AAIJ,MAAMC,aAAsC,GAAG,SAAzCA,aAAyC,GAAM;AACnDD,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAFD;;AAIA,SACE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,KAAK,IAAI,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQA,KAAR,CADZ,EAEE,MAAC,YAAD;AAAc,IAAA,OAAO,EAAEO,KAAK,IAAI,CAACC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AACE,IAAA,IAAI,EAAET,IADR;AAEE,IAAA,WAAW,EAAEE,WAFf;AAGE,IAAA,aAAa,EAAES,aAHjB;AAIE,IAAA,QAAQ,EAAEP,QAJZ;AAKE,IAAA,OAAO,EAAEK,OALX;AAME,IAAA,SAAS,EAAEF,SANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,EAYE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAeC,KAAK,IAAI,CAACC,OAAV,IAAqBD,KAAK,CAACI,OAA1C,CAZF,CADF;AAgBD,CAhCD;;GAAMb,K;;KAAAA,K;AAkCN,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport { FieldPropsType } from \"./types\";\r\nimport {\r\n  FieldContainer,\r\n  Label,\r\n  FieldContent,\r\n  ErrorMessage,\r\n} from \"./styledComponent\";\r\n\r\nconst Field: React.FC<FieldPropsType> = ({\r\n  name,\r\n  label,\r\n  placeholder,\r\n  errors,\r\n  register,\r\n  component: Component,\r\n  validator,\r\n}) => {\r\n  const error = errors[name];\r\n  const [isFocus, setIsFocus] = useState<boolean>(false);\r\n\r\n  const handleControl: React.ReactEventHandler = () => {\r\n    setIsFocus(!isFocus);\r\n  };\r\n\r\n  return (\r\n    <FieldContainer>\r\n      {label && <Label>{label}</Label>}\r\n      <FieldContent isError={error && !isFocus}>\r\n        <Component\r\n          name={name}\r\n          placeholder={placeholder}\r\n          handleControl={handleControl}\r\n          register={register}\r\n          isFocus={isFocus}\r\n          validator={validator}\r\n        />\r\n      </FieldContent>\r\n      <ErrorMessage>{error && !isFocus && error.message}</ErrorMessage>\r\n    </FieldContainer>\r\n  );\r\n};\r\n\r\nexport default Field;\r\n"]},"metadata":{},"sourceType":"module"}