{"ast":null,"code":"import { applyMiddleware, createStore, combineReducers } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { postsListReducer, postReducer } from \"../reducers\";\nimport { rootSaga } from \"../middlewares\";\nexport const makeStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(combineReducers({\n    postsListReducer,\n    postReducer\n  }), applyMiddleware(sagaMiddleware));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["D:/Dima/d-t-t-e/redux/store/store.ts"],"names":["applyMiddleware","createStore","combineReducers","createSagaMiddleware","createWrapper","postsListReducer","postReducer","rootSaga","makeStore","sagaMiddleware","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAA8CC,eAA9C,QAAqE,OAArE;AACA,OAAOC,oBAAP,MAA2C,YAA3C;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,aAA9C;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAMA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,QAAMC,cAAc,GAAGN,oBAAoB,EAA3C;AACA,QAAMO,KAAK,GAAGT,WAAW,CACvBC,eAAe,CAAC;AAAEG,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,GAAD,CADQ,EAEvBN,eAAe,CAACS,cAAD,CAFQ,CAAzB;AAICC,EAAAA,KAAD,CAAqBC,QAArB,GAAgCF,cAAc,CAACG,GAAf,CAAmBL,QAAnB,CAAhC;AAEA,SAAOG,KAAP;AACD,CATM;AAWP,OAAO,MAAMG,OAAO,GAAGT,aAAa,CAACI,SAAD,EAAY;AAAEM,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { applyMiddleware, createStore, Store, combineReducers } from \"redux\";\r\nimport createSagaMiddleware, { Task } from \"redux-saga\";\r\nimport { createWrapper } from \"next-redux-wrapper\";\r\n\r\nimport { postsListReducer, postReducer } from \"../reducers\";\r\nimport { rootSaga } from \"../middlewares\";\r\n\r\nexport interface SagaStore extends Store {\r\n  sagaTask?: Task;\r\n}\r\n\r\nexport const makeStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const store = createStore(\r\n    combineReducers({ postsListReducer, postReducer }),\r\n    applyMiddleware(sagaMiddleware)\r\n  );\r\n  (store as SagaStore).sagaTask = sagaMiddleware.run(rootSaga);\r\n\r\n  return store;\r\n};\r\n\r\nexport const wrapper = createWrapper(makeStore, { debug: true });\r\n"]},"metadata":{},"sourceType":"module"}