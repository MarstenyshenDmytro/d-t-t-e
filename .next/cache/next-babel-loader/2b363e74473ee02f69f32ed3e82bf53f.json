{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SUCCESS_POST, ERROR_POST } from \"../actions/post\";\nconst initialState = {\n  data: null,\n  error: false\n};\n\nconst postReducer = (state = initialState, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case \"__NEXT_REDUX_WRAPPER_HYDRATE__\":\n      {\n        return _objectSpread(_objectSpread({}, state), action.payload.postReducer);\n      }\n\n    case SUCCESS_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: action.payload\n      });\n\n    case ERROR_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: true\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default postReducer;","map":{"version":3,"sources":["D:/Dima/d-t-t-e/redux/reducers/post.ts"],"names":["SUCCESS_POST","ERROR_POST","initialState","data","error","postReducer","state","action","console","log","type","payload"],"mappings":";;;;;;AAAA,SAEEA,YAFF,EAGEC,UAHF,QAKO,iBALP;AA4BA,MAAMC,YAA8B,GAAG;AACrCC,EAAAA,IAAI,EAAE,IAD+B;AAErCC,EAAAA,KAAK,EAAE;AAF8B,CAAvC;;AAKA,MAAMC,WAAW,GAAG,CAClBC,KAAK,GAAGJ,YADU,EAElBK,MAFkB,KAGG;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAQA,MAAM,CAACG,IAAf;AACE,SAAK,gCAAL;AAAuC;AACrC,+CAAYJ,KAAZ,GAAsBC,MAAM,CAACI,OAAP,CAAeN,WAArC;AACD;;AACD,SAAKL,YAAL;AACE,6CACKM,KADL;AAEEH,QAAAA,IAAI,EAAEI,MAAM,CAACI;AAFf;;AAIF,SAAKV,UAAL;AACE,6CAAYK,KAAZ;AAAmBF,QAAAA,KAAK,EAAE;AAA1B;;AACF;AACE,+BAAYE,KAAZ;AAZJ;AAcD,CAnBD;;AAqBA,eAAeD,WAAf","sourcesContent":["import {\r\n  FETCH_POST,\r\n  SUCCESS_POST,\r\n  ERROR_POST,\r\n  DataType,\r\n} from \"../actions/post\";\r\n\r\nimport { HYDRATE } from \"next-redux-wrapper\";\r\n\r\nexport type InitialStateType = {\r\n  data: DataType | null;\r\n  error: boolean;\r\n};\r\n\r\ntype ActionPayloadType = {\r\n  data?: DataType;\r\n  postReducer?: InitialStateType;\r\n};\r\n\r\ntype ActionType = {\r\n  type:\r\n    | typeof FETCH_POST\r\n    | typeof HYDRATE\r\n    | typeof SUCCESS_POST\r\n    | typeof ERROR_POST;\r\n  payload?: ActionPayloadType;\r\n};\r\n\r\nconst initialState: InitialStateType = {\r\n  data: null,\r\n  error: false,\r\n};\r\n\r\nconst postReducer = (\r\n  state = initialState,\r\n  action: ActionType\r\n): InitialStateType => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case \"__NEXT_REDUX_WRAPPER_HYDRATE__\": {\r\n      return { ...state, ...action.payload.postReducer };\r\n    }\r\n    case SUCCESS_POST:\r\n      return {\r\n        ...state,\r\n        data: action.payload,\r\n      };\r\n    case ERROR_POST:\r\n      return { ...state, error: true };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport default postReducer;\r\n"]},"metadata":{},"sourceType":"module"}